
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Apr 26 19:57:32 CST 2011
//----------------------------------------------------

package sintactico_cup;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Apr 26 19:57:32 CST 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\016\003\000\002\016\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\005\005\000\002\005\006\000\002\017\004\000\002" +
    "\017\005\000\002\006\005\000\002\007\005\000\002\007" +
    "\006\000\002\020\004\000\002\020\005\000\002\010\010" +
    "\000\002\010\011\000\002\010\012\000\002\011\003\000" +
    "\002\011\004\000\002\011\004\000\002\011\005\000\002" +
    "\021\003\000\002\021\003\000\002\022\004\000\002\022" +
    "\005\000\002\012\003\000\002\012\004\000\002\023\003" +
    "\000\002\023\003\000\002\024\004\000\002\024\005\000" +
    "\002\013\003\000\002\013\003\000\002\013\005\000\002" +
    "\013\005\000\002\013\006\000\002\013\007\000\002\025" +
    "\004\000\002\025\005\000\002\014\002\000\002\014\005" +
    "\000\002\014\005\000\002\014\006\000\002\014\006\000" +
    "\002\014\006\000\002\014\004\000\002\014\004\000\002" +
    "\027\004\000\002\027\005\000\002\015\004\000\002\015" +
    "\005\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\026\004\uffd6\024\015\025\010\027\021\030" +
    "\023\031\014\033\012\035\017\037\016\040\006\001\002" +
    "\000\004\002\161\001\002\000\004\004\160\001\002\000" +
    "\014\010\054\012\061\013\056\025\053\026\063\001\002" +
    "\000\030\004\ufffb\006\ufffb\024\ufffb\025\ufffb\027\ufffb\030" +
    "\ufffb\031\ufffb\033\ufffb\035\ufffb\037\ufffb\040\ufffb\001\002" +
    "\000\004\016\155\001\002\000\022\004\uffd6\006\uffd6\025" +
    "\010\031\014\033\012\035\017\037\016\040\006\001\002" +
    "\000\016\010\054\012\061\013\056\025\053\026\063\041" +
    "\062\001\002\000\030\004\ufffd\006\ufffd\024\015\025\ufffd" +
    "\027\021\030\023\031\ufffd\033\ufffd\035\ufffd\037\ufffd\040" +
    "\ufffd\001\002\000\022\006\uffd6\025\010\031\014\032\uffd6" +
    "\033\012\035\017\037\016\040\006\001\002\000\004\025" +
    "\127\001\002\000\014\010\054\012\061\013\056\025\053" +
    "\026\063\001\002\000\016\010\054\012\061\013\056\025" +
    "\053\026\063\041\062\001\002\000\006\004\uffff\006\uffff" +
    "\001\002\000\004\025\045\001\002\000\030\004\ufffa\006" +
    "\ufffa\024\ufffa\025\ufffa\027\ufffa\030\ufffa\031\ufffa\033\ufffa" +
    "\035\ufffa\037\ufffa\040\ufffa\001\002\000\004\025\025\001" +
    "\002\000\030\004\ufff9\006\ufff9\024\ufff9\025\ufff9\027\ufff9" +
    "\030\ufff9\031\ufff9\033\ufff9\035\ufff9\037\ufff9\040\ufff9\001" +
    "\002\000\004\010\026\001\002\000\006\011\030\025\027" +
    "\001\002\000\006\005\033\011\034\001\002\000\026\006" +
    "\uffd6\024\015\025\010\027\021\030\023\031\014\033\012" +
    "\035\017\037\016\040\006\001\002\000\004\006\032\001" +
    "\002\000\030\004\uffef\006\uffef\024\uffef\025\uffef\027\uffef" +
    "\030\uffef\031\uffef\033\uffef\035\uffef\037\uffef\040\uffef\001" +
    "\002\000\004\025\043\001\002\000\026\006\uffd6\024\015" +
    "\025\010\027\021\030\023\031\014\033\012\035\017\037" +
    "\016\040\006\001\002\000\004\011\036\001\002\000\026" +
    "\006\uffd6\024\015\025\010\027\021\030\023\031\014\033" +
    "\012\035\017\037\016\040\006\001\002\000\004\006\040" +
    "\001\002\000\030\004\uffed\006\uffed\024\uffed\025\uffed\027" +
    "\uffed\030\uffed\031\uffed\033\uffed\035\uffed\037\uffed\040\uffed" +
    "\001\002\000\004\006\042\001\002\000\030\004\uffee\006" +
    "\uffee\024\uffee\025\uffee\027\uffee\030\uffee\031\uffee\033\uffee" +
    "\035\uffee\037\uffee\040\uffee\001\002\000\010\005\033\006" +
    "\ufff1\011\ufff1\001\002\000\006\006\ufff0\011\ufff0\001\002" +
    "\000\006\005\033\006\046\001\002\000\030\004\ufff3\006" +
    "\ufff3\024\ufff3\025\ufff3\027\ufff3\030\ufff3\031\ufff3\033\ufff3" +
    "\035\ufff3\037\ufff3\040\ufff3\001\002\000\004\006\050\001" +
    "\002\000\030\004\ufff2\006\ufff2\024\ufff2\025\ufff2\027\ufff2" +
    "\030\ufff2\031\ufff2\033\ufff2\035\ufff2\037\ufff2\040\ufff2\001" +
    "\002\000\040\004\uffec\005\uffec\006\uffec\007\uffec\011\uffec" +
    "\012\061\013\056\017\uffec\020\uffec\021\uffec\022\uffec\023" +
    "\uffec\032\uffec\034\uffec\036\uffec\001\002\000\004\036\123" +
    "\001\002\000\046\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010" +
    "\112\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\017\uffdd" +
    "\020\uffdd\021\uffdd\022\uffdd\023\uffdd\032\uffdd\034\uffdd\036" +
    "\uffdd\001\002\000\014\010\054\012\061\013\056\025\053" +
    "\026\063\001\002\000\044\004\uffe4\005\uffe4\006\uffe4\007" +
    "\uffe4\011\uffe4\012\uffe4\013\uffe4\014\103\015\105\017\uffe4" +
    "\020\uffe4\021\uffe4\022\uffe4\023\uffe4\032\uffe4\034\uffe4\036" +
    "\uffe4\001\002\000\010\010\uffe7\025\uffe7\026\uffe7\001\002" +
    "\000\010\010\054\025\053\026\063\001\002\000\016\007" +
    "\065\017\073\020\066\021\072\022\067\023\071\001\002" +
    "\000\010\010\uffe8\025\uffe8\026\uffe8\001\002\000\014\010" +
    "\054\012\061\013\056\025\053\026\063\001\002\000\044" +
    "\004\uffde\005\uffde\006\uffde\007\uffde\011\uffde\012\uffde\013" +
    "\uffde\014\uffde\015\uffde\017\uffde\020\uffde\021\uffde\022\uffde" +
    "\023\uffde\032\uffde\034\uffde\036\uffde\001\002\000\006\034" +
    "\uffcc\036\uffcc\001\002\000\014\010\uffca\012\uffca\013\uffca" +
    "\025\uffca\026\uffca\001\002\000\014\010\uffc8\012\uffc8\013" +
    "\uffc8\025\uffc8\026\uffc8\001\002\000\014\010\uffc6\012\uffc6" +
    "\013\uffc6\025\uffc6\026\uffc6\001\002\000\014\010\054\012" +
    "\061\013\056\025\053\026\063\001\002\000\014\010\uffc5" +
    "\012\uffc5\013\uffc5\025\uffc5\026\uffc5\001\002\000\014\010" +
    "\uffc7\012\uffc7\013\uffc7\025\uffc7\026\uffc7\001\002\000\014" +
    "\010\uffc9\012\uffc9\013\uffc9\025\uffc9\026\uffc9\001\002\000" +
    "\006\034\uffcb\036\uffcb\001\002\000\040\004\uffea\005\uffea" +
    "\006\uffea\007\uffea\011\uffea\012\061\013\056\017\uffea\020" +
    "\uffea\021\uffea\022\uffea\023\uffea\032\uffea\034\uffea\036\uffea" +
    "\001\002\000\010\010\054\025\053\026\063\001\002\000" +
    "\034\004\uffe9\005\uffe9\006\uffe9\007\uffe9\011\uffe9\017\uffe9" +
    "\020\uffe9\021\uffe9\022\uffe9\023\uffe9\032\uffe9\034\uffe9\036" +
    "\uffe9\001\002\000\040\004\uffe6\005\uffe6\006\uffe6\007\uffe6" +
    "\011\uffe6\012\061\013\056\017\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\023\uffe6\032\uffe6\034\uffe6\036\uffe6\001\002\000\034" +
    "\004\uffe5\005\uffe5\006\uffe5\007\uffe5\011\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\032\uffe5\034\uffe5\036\uffe5" +
    "\001\002\000\040\004\uffe3\005\uffe3\006\uffe3\007\uffe3\011" +
    "\uffe3\012\uffe3\013\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3" +
    "\023\uffe3\032\uffe3\034\uffe3\036\uffe3\001\002\000\010\010" +
    "\uffe2\025\uffe2\026\uffe2\001\002\000\010\010\054\025\053" +
    "\026\063\001\002\000\010\010\uffe1\025\uffe1\026\uffe1\001" +
    "\002\000\044\004\uffe0\005\uffe0\006\uffe0\007\uffe0\011\uffe0" +
    "\012\uffe0\013\uffe0\014\103\015\105\017\uffe0\020\uffe0\021" +
    "\uffe0\022\uffe0\023\uffe0\032\uffe0\034\uffe0\036\uffe0\001\002" +
    "\000\040\004\uffdf\005\uffdf\006\uffdf\007\uffdf\011\uffdf\012" +
    "\uffdf\013\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf" +
    "\032\uffdf\034\uffdf\036\uffdf\001\002\000\004\011\111\001" +
    "\002\000\044\004\uffdc\005\uffdc\006\uffdc\007\uffdc\011\uffdc" +
    "\012\uffdc\013\uffdc\014\uffdc\015\uffdc\017\uffdc\020\uffdc\021" +
    "\uffdc\022\uffdc\023\uffdc\032\uffdc\034\uffdc\036\uffdc\001\002" +
    "\000\016\010\054\011\113\012\061\013\056\025\053\026" +
    "\063\001\002\000\044\004\uffdb\005\uffdb\006\uffdb\007\uffdb" +
    "\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\017\uffdb\020" +
    "\uffdb\021\uffdb\022\uffdb\023\uffdb\032\uffdb\034\uffdb\036\uffdb" +
    "\001\002\000\006\005\116\011\117\001\002\000\004\011" +
    "\122\001\002\000\014\010\054\012\061\013\056\025\053" +
    "\026\063\001\002\000\044\004\uffda\005\uffda\006\uffda\007" +
    "\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\017\uffda" +
    "\020\uffda\021\uffda\022\uffda\023\uffda\032\uffda\034\uffda\036" +
    "\uffda\001\002\000\006\005\116\011\uffd8\001\002\000\004" +
    "\011\uffd7\001\002\000\044\004\uffd9\005\uffd9\006\uffd9\007" +
    "\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\017\uffd9" +
    "\020\uffd9\021\uffd9\022\uffd9\023\uffd9\032\uffd9\034\uffd9\036" +
    "\uffd9\001\002\000\024\004\uffd6\006\uffd6\025\010\031\014" +
    "\032\uffd6\033\012\035\017\037\016\040\006\001\002\000" +
    "\010\004\uffd1\006\uffd1\032\uffd1\001\002\000\034\004\uffeb" +
    "\005\uffeb\006\uffeb\007\uffeb\011\uffeb\017\uffeb\020\uffeb\021" +
    "\uffeb\022\uffeb\023\uffeb\032\uffeb\034\uffeb\036\uffeb\001\002" +
    "\000\010\004\uffd0\006\uffd0\032\uffd0\001\002\000\004\007" +
    "\137\001\002\000\006\005\131\006\132\001\002\000\004" +
    "\025\127\001\002\000\030\004\ufff8\006\ufff8\024\ufff8\025" +
    "\ufff8\027\ufff8\030\ufff8\031\ufff8\033\ufff8\035\ufff8\037\ufff8" +
    "\040\ufff8\001\002\000\004\006\134\001\002\000\030\004" +
    "\ufff7\006\ufff7\024\ufff7\025\ufff7\027\ufff7\030\ufff7\031\ufff7" +
    "\033\ufff7\035\ufff7\037\ufff7\040\ufff7\001\002\000\006\005" +
    "\131\006\ufff6\001\002\000\004\006\ufff5\001\002\000\004" +
    "\026\140\001\002\000\006\005\ufff4\006\ufff4\001\002\000" +
    "\006\006\143\032\144\001\002\000\004\032\147\001\002" +
    "\000\022\006\uffd6\025\010\031\014\032\uffd6\033\012\035" +
    "\017\037\016\040\006\001\002\000\010\004\uffd4\006\uffd4" +
    "\032\uffd4\001\002\000\006\006\143\032\uffce\001\002\000" +
    "\004\032\uffcd\001\002\000\010\004\uffd3\006\uffd3\032\uffd3" +
    "\001\002\000\022\004\ufffc\006\ufffc\025\ufffc\031\ufffc\033" +
    "\ufffc\035\ufffc\037\ufffc\040\ufffc\001\002\000\004\034\152" +
    "\001\002\000\024\004\uffd6\006\uffd6\025\010\031\014\032" +
    "\uffd6\033\012\035\017\037\016\040\006\001\002\000\010" +
    "\004\uffd2\006\uffd2\032\uffd2\001\002\000\006\004\ufffe\006" +
    "\ufffe\001\002\000\014\010\054\012\061\013\056\025\053" +
    "\026\063\001\002\000\010\004\uffd5\006\uffd5\032\uffd5\001" +
    "\002\000\010\004\uffcf\006\uffcf\032\uffcf\001\002\000\004" +
    "\002\000\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\022\002\003\003\004\004\012\005\006\007" +
    "\021\010\023\014\017\016\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\011\156\012\050\013\054\021" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\153\001\001\000\014\011\057\012\050\013\054\015" +
    "\150\021\056\001\001\000\014\004\012\005\006\007\021" +
    "\010\023\016\147\001\001\000\004\014\140\001\001\000" +
    "\004\006\127\001\001\000\012\011\125\012\050\013\054" +
    "\021\056\001\001\000\014\011\057\012\050\013\054\015" +
    "\051\021\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\034\001\001" +
    "\000\020\003\030\004\012\005\006\007\021\010\023\014" +
    "\017\016\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\040\004\012\005\006\007" +
    "\021\010\023\014\017\016\010\001\001\000\002\001\001" +
    "\000\020\003\036\004\012\005\006\007\021\010\023\014" +
    "\017\016\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\043\001" +
    "\001\000\002\001\001\000\004\020\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\075\022\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\011\107\012\050\013\054\021\056\001\001\000" +
    "\006\023\103\024\101\001\001\000\002\001\001\000\006" +
    "\012\074\013\054\001\001\000\004\026\067\001\001\000" +
    "\002\001\001\000\012\011\063\012\050\013\054\021\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\011\073" +
    "\012\050\013\054\021\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\021\075\022\076\001\001\000\006\012\077\013\054\001" +
    "\001\000\002\001\001\000\006\021\075\022\100\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\105\001\001\000\002\001\001\000\006\023\103" +
    "\024\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\011\113\012\050\013\054\021\056" +
    "\001\001\000\002\001\001\000\004\025\114\001\001\000" +
    "\002\001\001\000\012\011\117\012\050\013\054\021\056" +
    "\001\001\000\002\001\001\000\004\025\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\132\001\001\000\004\006\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\141\001\001\000" +
    "\002\001\001\000\004\014\144\001\001\000\002\001\001" +
    "\000\004\027\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\011" +
    "\155\012\050\013\054\021\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
               
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
return Scanner.nextToken(); 
    }


	
	Scanner scanner;
	
	public parser(java.io.Reader input){
	scanner = new  Scanner(input);
	}

	public void report_error(String message, Object info) {
		StringBuffer m = new  StringBuffer("Error ");

		if (info instanceof java_cup.runtime.Symbol) 
	      	m.append( "("+info.toString()+")" );
     
		m.append(" : "+message);
   
		System.out.println(m);
	}
   
	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		throw new  RuntimeException("Error Fatal de Sint�xis");
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Ext_Sym_Op ::= Sym_MayorIgual 
            {
              AST_Sym_Op RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  AST_Sym_Op(s) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ext_Sym_Op",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Ext_Sym_Op ::= Sym_Mayor 
            {
              AST_Sym_Op RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  AST_Sym_Op(s) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ext_Sym_Op",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Ext_Sym_Op ::= Sym_MenorIgual 
            {
              AST_Sym_Op RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  AST_Sym_Op(s) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ext_Sym_Op",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Ext_Sym_Op ::= Sym_Menor 
            {
              AST_Sym_Op RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  AST_Sym_Op(s) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ext_Sym_Op",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Ext_Sym_Op ::= Sym_Diferente 
            {
              AST_Sym_Op RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  AST_Sym_Op(s) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ext_Sym_Op",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Ext_Sym_Op ::= Sym_Igual 
            {
              AST_Sym_Op RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  AST_Sym_Op(s) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ext_Sym_Op",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Cup_Condition ::= Cup_Expression Ext_Sym_Op Cup_Expression 
            {
              AST_Condition RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST_Expression e = (AST_Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST_Sym_Op o = (AST_Sym_Op)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST_Expression e2 = (AST_Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  AST_Condition(e,o,e2) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Condition",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Cup_Condition ::= Sym_Odd Cup_Expression 
            {
              AST_Condition RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST_Expression e = (AST_Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  AST_Condition(e) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Condition",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Ext_Lista_Statement ::= Sym_PuntoYComa Cup_Statement Ext_Lista_Statement 
            {
              AST_Lista_Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST_Statement s = (AST_Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST_Lista_Statement l = (AST_Lista_Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  AST_Lista_Statement(s,l) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ext_Lista_Statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Ext_Lista_Statement ::= Sym_PuntoYComa Cup_Statement 
            {
              AST_Lista_Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST_Statement s = (AST_Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  AST_Lista_Statement(s) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ext_Lista_Statement",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Cup_Statement ::= Sym_Write Cup_Expression 
            {
              AST_Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST_Expression e = (AST_Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  AST_Statement(e) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Cup_Statement ::= Sym_Return Cup_Expression 
            {
              AST_Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST_Expression e = (AST_Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  AST_Statement(e) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Cup_Statement ::= Sym_While Cup_Condition Sym_Do Cup_Statement 
            {
              AST_Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST_Condition c = (AST_Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST_Statement s = (AST_Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  AST_Statement(c,s) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Cup_Statement ::= Sym_If Cup_Condition Sym_Then Cup_Statement 
            {
              AST_Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST_Condition c = (AST_Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST_Statement s = (AST_Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  AST_Statement(c,s) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Cup_Statement ::= Sym_Begin Cup_Statement Ext_Lista_Statement Sym_End 
            {
              AST_Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST_Lista_Statement l = (AST_Lista_Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new  AST_Statement(s,l) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Cup_Statement ::= Sym_Begin Cup_Statement Sym_End 
            {
              AST_Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST_Statement s = (AST_Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new  AST_Statement(s) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Cup_Statement ::= Sym_Name Sym_DosPIgual Cup_Expression 
            {
              AST_Statement RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST_Expression e = (AST_Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  AST_Statement(n,e) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Cup_Statement ::= 
            {
              AST_Statement RESULT =null;
		 RESULT = new  AST_Statement() ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Ext_Lista_Expression ::= Sym_Coma Cup_Expression Ext_Lista_Expression 
            {
              AST_Lista_Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST_Lista_Expression l = (AST_Lista_Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  AST_Lista_Expression(e,l) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ext_Lista_Expression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Ext_Lista_Expression ::= Sym_Coma Cup_Expression 
            {
              AST_Lista_Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST_Expression e = (AST_Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  AST_Lista_Expression(e) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ext_Lista_Expression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Cup_Factor ::= Sym_Name Sym_ParenI Cup_Expression Ext_Lista_Expression Sym_ParenF 
            {
              AST_Factor RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST_Expression e = (AST_Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST_Lista_Expression l = (AST_Lista_Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new  AST_Factor(n,e,l) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Factor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Cup_Factor ::= Sym_Name Sym_ParenI Cup_Expression Sym_ParenF 
            {
              AST_Factor RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST_Expression e = (AST_Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new  AST_Factor(n,e) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Factor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Cup_Factor ::= Sym_Name Sym_ParenI Sym_ParenF 
            {
              AST_Factor RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new  AST_Factor(n) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Factor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Cup_Factor ::= Sym_ParenI Cup_Expression Sym_ParenF 
            {
              AST_Factor RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST_Expression e = (AST_Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new  AST_Factor(e) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Factor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Cup_Factor ::= Sym_Name 
            {
              AST_Factor RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  AST_Factor(n) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Factor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Cup_Factor ::= Sym_Number 
            {
              AST_Factor RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  AST_Factor(n) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Factor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Ext_Lista_Multidivi ::= Ext_Sym_Multidivi Cup_Factor Ext_Lista_Multidivi 
            {
              AST_Lista_Multidivi RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST_Sym_Multidivi m = (AST_Sym_Multidivi)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST_Factor f = (AST_Factor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST_Lista_Multidivi l = (AST_Lista_Multidivi)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  AST_Lista_Multidivi(m,f,l) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ext_Lista_Multidivi",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Ext_Lista_Multidivi ::= Ext_Sym_Multidivi Cup_Factor 
            {
              AST_Lista_Multidivi RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST_Sym_Multidivi m = (AST_Sym_Multidivi)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST_Factor f = (AST_Factor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  AST_Lista_Multidivi(m,f) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ext_Lista_Multidivi",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Ext_Sym_Multidivi ::= Sym_Division 
            {
              AST_Sym_Multidivi RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  AST_Sym_Multidivi(d) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ext_Sym_Multidivi",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Ext_Sym_Multidivi ::= Sym_Multiplicacion 
            {
              AST_Sym_Multidivi RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  AST_Sym_Multidivi(m) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ext_Sym_Multidivi",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Cup_Term ::= Cup_Factor Ext_Lista_Multidivi 
            {
              AST_Term RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST_Factor f = (AST_Factor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST_Lista_Multidivi l = (AST_Lista_Multidivi)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  AST_Term(m,l) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Term",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Cup_Term ::= Cup_Factor 
            {
              AST_Term RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST_Factor f = (AST_Factor)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  AST_Term(f) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Term",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Ext_Lista_Masomenos ::= Ext_Sym_Masomenos Cup_Term Ext_Lista_Masomenos 
            {
              AST_Lista_Masomenos RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST_Sym_Masomenos m = (AST_Sym_Masomenos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST_Term t = (AST_Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST_Lista_Masomenos l = (AST_Lista_Masomenos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  AST_Lista_Masomenos(m,t,l) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ext_Lista_Masomenos",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Ext_Lista_Masomenos ::= Ext_Sym_Masomenos Cup_Term 
            {
              AST_Lista_Masomenos RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST_Sym_Masomenos m = (AST_Sym_Masomenos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST_Term t = (AST_Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  AST_Lista_Masomenos(m,t) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ext_Lista_Masomenos",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Ext_Sym_Masomenos ::= Sym_Menos 
            {
              AST_Sym_Masomenos RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  AST_Sym_Masomenos(m) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ext_Sym_Masomenos",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Ext_Sym_Masomenos ::= Sym_Mas 
            {
              AST_Sym_Masomenos RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  AST_Sym_Masomenos(m) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ext_Sym_Masomenos",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Cup_Expression ::= Ext_Sym_Masomenos Cup_Term Ext_Lista_Masomenos 
            {
              AST_Expression RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST_Sym_Masomenos m = (AST_Sym_Masomenos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST_Term t = (AST_Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST_Lista_Masomenos lm = (AST_Lista_Masomenos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  AST_Expression(m,t,lm) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Cup_Expression ::= Ext_Sym_Masomenos Cup_Term 
            {
              AST_Expression RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST_Sym_Masomenos m = (AST_Sym_Masomenos)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST_Term t = (AST_Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  AST_Expression(m,t) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Cup_Expression ::= Cup_Term Ext_Lista_Masomenos 
            {
              AST_Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST_Term t = (AST_Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST_Lista_Masomenos lm = (AST_Lista_Masomenos)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  AST_Expression(t,lm) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Cup_Expression ::= Cup_Term 
            {
              AST_Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST_Term t = (AST_Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new  AST_Expression(t) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Cup_Function ::= Sym_Function Sym_Name Sym_ParenI Sym_Name Ext_Lista_Sym_Name Sym_ParenF Cup_Block Sym_PuntoYComa 
            {
              AST_Function RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int par_nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int par_nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object par_n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AST_Lista_Sym_Name ln = (AST_Lista_Sym_Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST_Block b = (AST_Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new  AST_Function(n,par_n,l,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Function",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Cup_Function ::= Sym_Function Sym_Name Sym_ParenI Sym_Name Sym_ParenF Cup_Block Sym_PuntoYComa 
            {
              AST_Function RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int par_namleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int par_namright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object par_nam = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST_Block b = (AST_Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new  AST_Function(n,par_n,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Function",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Cup_Function ::= Sym_Function Sym_Name Sym_ParenI Sym_ParenF Cup_Block Sym_PuntoYComa 
            {
              AST_Function RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST_Block b = (AST_Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new  AST_Function(n,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Function",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Ext_Lista_Sym_Name ::= Sym_Coma Sym_Name Ext_Lista_Sym_Name 
            {
              AST_Lista_Sym_Name RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST_Lista_Sym_Name l = (AST_Lista_Sym_Name)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new  AST_Lista_Sym_Name(n,l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ext_Lista_Sym_Name",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Ext_Lista_Sym_Name ::= Sym_Coma Sym_Name 
            {
              AST_Lista_Sym_Name RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new  AST_Lista_Sym_Name(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ext_Lista_Sym_Name",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Cup_Variable ::= Sym_Var Sym_Name Ext_Lista_Sym_Name Sym_PuntoYComa 
            {
              AST_Variable RESULT =null;
		int namleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int namright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nam = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST_Lista_Sym_Name ln = (AST_Lista_Sym_Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new  AST_Variable(nam,ln); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Variable",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Cup_Variable ::= Sym_Var Sym_Name Sym_PuntoYComa 
            {
              AST_Variable RESULT =null;
		int namleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int namright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nam = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new  AST_Variable(nam); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Variable",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Cup_Constant_Def ::= Sym_Name Sym_Igual Sym_Number 
            {
              AST_Constant_Def RESULT =null;
		int namleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int namright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nam = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new  AST_Constant_Def(nam,num); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Constant_Def",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Ext_Lista_Constant_Def ::= Sym_Coma Cup_Constant_Def Ext_Lista_Constant_Def 
            {
              AST_Lista_Constant_Def RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST_Constant_Def cd = (AST_Constant_Def)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST_Lista_Constant_Def l = (AST_Lista_Constant_Def)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new  AST_Lista_Constant_Def(cd,l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ext_Lista_Constant_Def",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Ext_Lista_Constant_Def ::= Sym_Coma Cup_Constant_Def 
            {
              AST_Lista_Constant_Def RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST_Constant_Def cd = (AST_Constant_Def)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new  AST_Lista_Constant_Def(cd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ext_Lista_Constant_Def",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Cup_Constant ::= Sym_Const Cup_Constant_Def Ext_Lista_Constant_Def Sym_PuntoYComa 
            {
              AST_Constant RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST_Constant_Def cd = (AST_Constant_Def)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST_Lista_Constant_Def l = (AST_Lista_Constant_Def)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new  AST_Constant(cd,l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Constant",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Cup_Constant ::= Sym_Const Cup_Constant_Def Sym_PuntoYComa 
            {
              AST_Constant RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST_Constant_Def cd = (AST_Constant_Def)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new  AST_Constant(cd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Constant",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Cup_Declaration ::= Cup_Function 
            {
              AST_Declaration RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST_Function f = (AST_Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new  AST_Declaration(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Cup_Declaration ::= Cup_Variable 
            {
              AST_Declaration RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST_Variable v = (AST_Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new  AST_Declaration(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Cup_Declaration ::= Cup_Constant 
            {
              AST_Declaration RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST_Constant c = (AST_Constant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new  AST_Declaration(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Ext_Lista_Declaration ::= Cup_Declaration Ext_Lista_Declaration 
            {
              AST_Lista_Declaration RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST_Declaration d = (AST_Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST_Lista_Declaration l = (AST_Lista_Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new  AST_Lista_Declaration(d,l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ext_Lista_Declaration",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Ext_Lista_Declaration ::= Cup_Declaration 
            {
              AST_Lista_Declaration RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST_Declaration d = (AST_Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new  AST_Lista_Declaration(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ext_Lista_Declaration",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Cup_Block ::= Ext_Lista_Declaration Cup_Statement 
            {
              AST_Block RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST_Lista_Declaration ld = (AST_Lista_Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST_Statement s = (AST_Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new  AST_Block(ld,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Cup_Block ::= Cup_Statement 
            {
              AST_Block RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST_Statement s = (AST_Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new  AST_Block(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Block",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Cup_Program ::= Cup_Block Sym_Punto 
            {
              AST_Program RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST_Block b = (AST_Block)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new  AST_Program(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cup_Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Cup_Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST_Program start_val = (AST_Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

